/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source, visit the plugin's github repository
*/

'use strict';

var state = require('@codemirror/state');
var obsidian = require('obsidian');
var view = require('@codemirror/view');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */


function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const TOKEN_NAMES = {
    sceneHeading: "scene-heading",
    formattingSceneHeading: "formatting-scene-heading",
    action: "action",
    character: "character",
    dialogue: "dialogue",
    parenthetical: "parenthetical",
    lyrics: "lyrics",
    centered: "centered",
    transition: "transition",
    section: "section",
    synopsis: "synopsis",
    boneyard: "boneyard",
    fBoneyardStart: "formatting-boneyard-start",
    fBoneyardEnd: "formatting-boneyard-end",
    pageBreak: "page-break",
};
const n = TOKEN_NAMES;
const LINE_TOKENS = [
    {
        id: n.sceneHeading,
        regex: /^((?:\*{0,3}_?)?(?:(?:int|ext|est|i\/e|int\/ext)[. ]).+)|^(?:\.(?!\.+))(.+)/i,
    },
    {
        id: n.action,
        regex: /^!.*$/,
    },
    {
        id: n.character,
        regex: /^[^\S\r\n]*(?=.*[A-Z\u00C0-\u00DEF])[A-Z0-9\u00C0-\u00DEF \t'.-]+\s?(\(.*\))?$|@.*$/,
    },
    {
        id: n.dialogue,
        regex: /^[^\S\r\n]*(\^?)?(?:\n(?!\n+))([\s\S]+)/,
    },
    {
        id: n.parenthetical,
        regex: /^[^\S\r\n]*(\(.+\))$/,
    },
    {
        id: n.lyrics,
        regex: /^~.*$/,
    },
    {
        id: n.centered,
        regex: /^[^\S\r\n]*>[^<>]+<$/,
    },
    {
        id: n.transition,
        regex: /^[^\S\r\n]*(>[^<\n\r]*|[A-Z ]+ TO:)$/,
    },
    {
        id: n.section,
        regex: /^(#+)(?: *)(.*)/,
    },
    {
        id: n.synopsis,
        regex: /^(?:=(?!=+) *)(.*)$/,
    },
    // note: /^(?:\[{2}(?!\[+))(.+)(?:\]{2}(?!\[+))$/,
    // note_inline: /(?:\[{2}(?!\[+))([\s\S]+?)(?:\]{2}(?!\[+))/g,
    // boneyard: /(^\/\*|^\*\/)$/g,
    {
        id: n.fBoneyardStart,
        regex: /(^\/\*$)/g,
    },
    {
        id: n.fBoneyardEnd,
        regex: /(^\*\/$)/g,
    },
    {
        id: n.pageBreak,
        regex: /^={3,}$/,
    },
];

function composeFClass(t) {
    return `cm-formatting cm-fountain-formatting-${t}`;
}
function getLineFormat(line, state, ctx) {
    if (!line.trim()) {
        // at least two spaces to be considered
        // https://fountain.io/syntax#line-breaks
        if (line.length < 2)
            state.inDialogue = false;
        return null;
    }
    for (const { id: tId, regex: tRegex } of LINE_TOKENS) {
        if (tRegex.test(line)) {
            if (tId === TOKEN_NAMES.fBoneyardEnd) {
                state.inBoneyard = false;
            }
            if (state.inBoneyard) {
                return TOKEN_NAMES.boneyard;
            }
            if (tId === TOKEN_NAMES.fBoneyardStart) {
                state.inDialogue = false;
                state.inBoneyard = true;
            }
            if (tId === TOKEN_NAMES.character) {
                if (ctx.afterEmptyLine && !ctx.beforeEmptyLine && !ctx.isLastLine) {
                    state.inDialogue = true;
                }
                else {
                    break;
                }
            }
            if (tId === TOKEN_NAMES.parenthetical) {
                if (!state.inDialogue)
                    break;
            }
            if (tId === TOKEN_NAMES.transition) {
                if (!(ctx.afterEmptyLine && ctx.beforeEmptyLine))
                    break;
            }
            return tId;
        }
    }
    if (state.inDialogue) {
        return TOKEN_NAMES.dialogue;
    }
    if (state.inBoneyard) {
        return TOKEN_NAMES.boneyard;
    }
    return TOKEN_NAMES.action;
}
function buildDecorations(view$1) {
    const builder = new state.RangeSetBuilder();
    if (!isFountainEnabled(view$1))
        return builder.finish();
    function markDeco(start, end, className) {
        const deco = view.Decoration.mark({ class: className });
        builder.add(start, end, deco);
    }
    const state$1 = {
        inDialogue: false,
        inBoneyard: false,
    };
    for (const { from, to } of view$1.visibleRanges) {
        const visibleText = view$1.state.sliceDoc(from, to);
        const maxLines = view$1.state.doc.lines;
        for (let pos = from; pos <= to;) {
            const line = view$1.state.doc.lineAt(pos);
            const { from: lFrom, to: lTo, text: lText } = line;
            const relFrom = lFrom - from;
            const relTo = lTo - from;
            const ctx = {
                afterEmptyLine: visibleText[relFrom - 2] === "\n",
                beforeEmptyLine: visibleText[relTo + 1] === "\n",
                isLastLine: line.number === maxLines,
            };
            const token = getLineFormat(lText, state$1, ctx);
            if (!token) {
                pos = lTo + 1;
                continue;
            }
            const deco = view.Decoration.line({ class: "cm-fountain-" + token });
            builder.add(lFrom, lFrom, deco);
            // Mark Decorations
            const firstChar = lText[0];
            const lastChar = lText[line.length - 1];
            if (token === TOKEN_NAMES.action &&
                firstChar === "!" &&
                lText.substring(0, 3) !== "![[") {
                markDeco(lFrom, lFrom + 1, composeFClass(token));
            }
            if (token === TOKEN_NAMES.sceneHeading && firstChar === ".") {
                markDeco(lFrom, lFrom + 1, composeFClass(token));
            }
            if (token === TOKEN_NAMES.lyrics && firstChar === "~") {
                markDeco(lFrom, lFrom + 1, composeFClass(token));
            }
            if (token === TOKEN_NAMES.synopsis && firstChar === "=") {
                markDeco(lFrom, lFrom + 2, composeFClass(token));
            }
            if (token === TOKEN_NAMES.character) {
                if (firstChar === "@") {
                    markDeco(lFrom, lFrom + 1, composeFClass(token));
                }
                if (lastChar === ")") {
                    const charExt = lText.match(/(\(.*\))?$/g);
                    if (charExt === null) {
                        console.error("Character regex broken; char ext segment should exist");
                        continue;
                    }
                    const charExtLength = charExt[0].length;
                    const charExtStart = lTo - charExtLength;
                    markDeco(charExtStart, lTo, "cm-fountain-character-extension");
                }
            }
            if (token === TOKEN_NAMES.centered && lastChar === "<") {
                markDeco(lTo - 1, lTo, composeFClass(token));
            }
            pos = lTo + 1;
        }
    }
    return builder.finish();
}
function isFountainEnabled(view) {
    var _a, _b;
    const info = view.state.field(obsidian.editorInfoField);
    const { app, file } = info;
    if ((file === null || file === void 0 ? void 0 : file.extension) == "fountain")
        return true;
    if (file) {
        const fileCache = app.metadataCache.getFileCache(file);
        const cssClasses = (_b = (_a = fileCache === null || fileCache === void 0 ? void 0 : fileCache.frontmatter) === null || _a === void 0 ? void 0 : _a.cssclasses) !== null && _b !== void 0 ? _b : [];
        return cssClasses.includes("fountain");
    }
}

let FountainPlugin$1 = class FountainPlugin {
    constructor(view) {
        this.decorations = buildDecorations(view);
    }
    update(update) {
        if (update.docChanged || update.viewportChanged) {
            this.decorations = buildDecorations(update.view);
        }
    }
    destroy() { }
};
const pluginSpec = {
    decorations: (value) => value.decorations,
};
const fountainPlugin = view.ViewPlugin.fromClass(FountainPlugin$1, pluginSpec);

class FountainPlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            this.registerEditorExtension(state.Prec.lowest(fountainPlugin));
        });
    }
    onunload() { }
}

module.exports = FountainPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
